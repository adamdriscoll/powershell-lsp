<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.LanguageServer.Client.Preview</name>
    </assembly>
    <members>
        <member name="T:Microsoft.VisualStudio.LanguageServer.Client.CodeRemoteContentDefinition">
            <summary>
            Class which represents the code-remote ContentType, which should be used as a base definition for all files that use remote language server.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServer.Client.CodeRemoteContentDefinition.CodeRemoteContentTypeName">
            <summary>
            Code remote ContentType name.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServer.Client.CodeRemoteContentDefinition.CodeRemoteFoobarContentTypeDefinition">
            <summary>
            Exports the code-remote content type definition so extensions can inherit from it.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServer.Client.Connection">
            <summary>
            Class which represents the connection to a language server.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServer.Client.Connection.#ctor(System.IO.Stream,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.LanguageServer.Client.Connection"/> class.
            </summary>
            <param name="reader">Reader stream.</param>
            <param name="writer">Writer stream.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServer.Client.Connection.Reader">
            <summary>
            Gets the reader stream.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServer.Client.Connection.Writer">
            <summary>
            Gets the writer stream.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClientWorkspaceSymbolProvider">
            <summary>
            Interface representing a provider which can implement custom behavior around the 'workspace/symbol' request.
            </summary>
            <remarks>
            All of the methods defined in this interface must be implemented and should not default to throw <see cref="T:System.NotImplementedException"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClientWorkspaceSymbolProvider.RequestWorkspaceSymbols(Microsoft.VisualStudio.LanguageServer.Protocol.WorkspaceSymbolParams,System.Func{Microsoft.VisualStudio.LanguageServer.Protocol.WorkspaceSymbolParams,System.Threading.Tasks.Task{Microsoft.VisualStudio.LanguageServer.Protocol.SymbolInformation[]}})">
            <summary>
            Intercepts calls for the 'workspace/symbol' request.
            </summary>
            <param name="param">Parameter to be sent for request.</param>
            <param name="sendRequest">
            Function delegate which will send the request to the server. This delegate can be ignored and not invoked
            if the choice is to not send the request to the server.  It must be invoked in this method if the choice is
            to send the request to the server.
            </param>
            <returns>An array of <see cref="T:Microsoft.VisualStudio.LanguageServer.Protocol.SymbolInformation"/>.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClient">
            <summary>
            Interface representing a language client which connects to a language sever protocol based language server.
            </summary>
            <remarks>
            All of the methods defined in this interface must be implemented and should not default to throw <see cref="T:System.NotImplementedException"/>.
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClient.StartAsync">
            <summary>
            Async event to indicate that server should be started.  If the server is already started, the request to start will be ignored.
            </summary>
            <remarks>
            This event must be invoked in order to start the language server.
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClient.StopAsync">
            <summary>
            Async event to indicate that server should be stopped, if the server has been started.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClient.Name">
            <summary>
            Gets the name of the language client (displayed to the user).
            </summary>
            <remarks>
            This property must be implemented and cannot return null or throw exceptions.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClient.ConfigurationSections">
            <summary>
            Gets the configuration section names for the language client. This may be null if the language client
            does not provide settings.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClient.InitializationOptions">
            <summary>
            Gets the initialization options object the client wants to send when 'initialize' message is sent.
            This may be null if the client does not need custom initialization options.
            </summary>
            <remarks>
            The object defined here must be JSON serializable.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClient.FilesToWatch">
            <summary>
            Gets the list of file names to watch for changes.  Changes will be sent to the server via 'workspace/didChangeWatchedFiles'
            message.  The files to watch must be under the current active workspace.  The file names can be specified as a relative
            paths to the exact file, or as glob patterns following the standard in .gitignore see https://www.kernel.org/pub/software/scm/git/docs/gitignore.html files.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClient.OnLoadedAsync">
            <summary>
            Signals that the extension has been loaded.  The server can be started immediately, or wait for user action to start.  To start the server, invoke the <see cref="E:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClient.StartAsync"/> event;
            </summary>
            <returns>A Task which completes when actions that need to be performed when extension is loaded are done.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClient.ActivateAsync(System.Threading.CancellationToken)">
            <summary>
            Activates the language server.
            </summary>
            <param name="token">Cancellation token.</param>
            <returns>A <see cref="T:Microsoft.VisualStudio.LanguageServer.Client.Connection"/> object; or null if the language server cannot be started.</returns>
            <remarks>
            This is the method that gets called with the language server needs to be activated.  Any exceptions thrown here will be caught and displayed to users.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClientCustomMessage">
            <summary>
            Interface representing a remote language client that supports custom messages.
            </summary>
            <remarks>
            All of the methods defined in this interface must be implemented and should not default to throw <see cref="T:System.NotImplementedException"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClientCustomMessage.MiddleLayer">
            <summary>
            Gets the middle layer object that can intercept outgoing requests and responses.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClientCustomMessage.CustomMessageTarget">
            <summary>
            Gets the target object for receiving custom messages not covered by the language server protocol.
            </summary>
            <remarks>
            If left null, then custom messages won't be delivered.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClientCustomMessage.AttachForCustomMessageAsync(StreamJsonRpc.JsonRpc)">
            <summary>
            This method is called after the language server has been activated, but connection has not been established.
            </summary>
            <param name="rpc">The <see cref="T:StreamJsonRpc.JsonRpc"/> object used to send custom messages to the language server.</param>
            <returns>A task that completes when the language client is ready to send custom messages to the language server.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServer.Client.ProvideWorkspaceSettingsAttribute">
            <summary>
            ProvideWorkspaceSettingsAttribute class. Registers a workspace settings
            file for use in OpenFolder settings.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServer.Client.ProvideWorkspaceSettingsAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.LanguageServer.Client.ProvideWorkspaceSettingsAttribute"/> class.
            </summary>
            <param name="settingsType">The type of settings (e.g. "VSWorkspaceSettings").</param>
            <param name="relativeSettingsJsonPath">
            Relative path to the settings.json file that exists inside of the extension.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServer.Client.ProvideWorkspaceSettingsAttribute.SettingsType">
            <summary>
            Gets the type of settings (e.g. "VSWorkspaceSettings").
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServer.Client.ProvideWorkspaceSettingsAttribute.RelativeSettingsJsonPath">
            <summary>
            Gets the relative path to the settings.json file that exists inside of the extension.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServer.Client.ProvideWorkspaceSettingsAttribute.SettingName">
            <summary>
            Gets or sets the setting name. Defaults to a random GUID generated during the construction
            of the object.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServer.Client.ProvideWorkspaceSettingsAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServer.Client.ProvideWorkspaceSettingsAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClientCompletionProvider">
            <summary>
            Interface representing a provider which can provide middle layer support to customize completion related requests.
            </summary>
            <remarks>
            All of the methods defined in this interface must be implemented and should not default to throw <see cref="T:System.NotImplementedException"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClientCompletionProvider.RequestCompletions(Microsoft.VisualStudio.LanguageServer.Protocol.TextDocumentPositionParams,System.Func{Microsoft.VisualStudio.LanguageServer.Protocol.TextDocumentPositionParams,System.Threading.Tasks.Task{System.Object}})">
            <summary>
            Intercepts calls to the server for 'textDocument/completion' request.
            </summary>
            <param name="param">Parameter to be sent for request.</param>
            <param name="sendRequest">
            Function delegate which will send the request to the server. This delegate can be ignored and not invoked
            if the choice is to not send the request to the server.  It must be invoked in this method if the choice is
            to send the request to the server.
            </param>
            <returns>An object representing completion items.  Can be <see cref="T:Newtonsoft.Json.Linq.JObject"/> or an array of <see cref="T:Microsoft.VisualStudio.LanguageServer.Protocol.CompletionItem"/> or <see cref="T:Microsoft.VisualStudio.LanguageServer.Protocol.CompletionList"/>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClientCompletionProvider.ResolveCompletion(Microsoft.VisualStudio.LanguageServer.Protocol.CompletionItem,System.Func{Microsoft.VisualStudio.LanguageServer.Protocol.CompletionItem,System.Threading.Tasks.Task{Microsoft.VisualStudio.LanguageServer.Protocol.CompletionItem}})">
            <summary>
            Intercepts calls to the server for 'completion/resolve" request.
            </summary>
            <param name="item">The completion item to resolve.</param>
            <param name="sendRequest">
            Function delegate which will send the request to the server. This delegate can be ignored and not invoked
            if the choice is to not send the request to the server.  It must be invoked in this method if the choice is
            to send the request to the server.
            </param>
            <returns>A resolved completion item.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClientExtensions.SafeGetConfigurationSections(Microsoft.VisualStudio.LanguageServer.Client.ILanguageClient,Microsoft.VisualStudio.LanguageServer.Client.ITelemetryLogger)">
            <summary>
            Call <see cref="P:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClient.ConfigurationSections" /> and catch any exceptions.
            </summary>
            <param name="languageClient">Language client to get configuration sections from.</param>
            <param name="telemetryLogger">Telemetry logger to log telemetry to if the ConfigurationSections call fails.</param>
            <returns>The configuration sections from the language client or an empty enumerable of strings.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServer.Client.IRemoteLanguageDropdownBarClient.RefreshAsync">
            <summary>
            Notifies the dropdown bar client that it should refresh.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServer.Client.RemoteLanguageServiceBroker">
            <summary>
            Partial implementation of RemoteLanguageServiceBroker.  Implementation of RemoteLanguageClientInstance.
            </summary>
            <summary>
            Partial implementation of RemoteLanguageServiceBroker
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServer.Client.DiagnosticsTableDataSource.RemoteLanguageSnapshotFactories">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.LanguageServer.Client.DiagnosticsTableEntriesSnapshotFactory"/>s.
            </summary>
            <remarks>
            There should be a new <see cref="T:Microsoft.VisualStudio.LanguageServer.Client.DiagnosticsTableEntriesSnapshotFactory"/> for each owner and file. In other words,
            a <see cref="T:Microsoft.VisualStudio.LanguageServer.Client.DiagnosticsTableEntriesSnapshotFactory"/> is unique by its owner (language client) and the file path it
            belongs to.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServer.Client.IContentTypeMetadata">
            <summary>
            Interface representing ContentType attribute values.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServer.Client.IContentTypeMetadata.ContentTypes">
            <summary>
            Gets the list of ContentType attribute values declared.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServer.Client.ContentTypeMetadataComparer">
            <summary>
            Equality comparer for content type metadata.
            </summary>
            <remarks>
            This comparer assumes that the content types in a <see cref="T:Microsoft.VisualStudio.LanguageServer.Client.IContentTypeMetadata"/> object are ordered.
            Two <see cref="T:Microsoft.VisualStudio.LanguageServer.Client.IContentTypeMetadata"/> objects must have the exact same content types in the same order
            to be considered equal.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServer.Client.IDiagnosticsTableDataSourceProvider.CreateDiagnosticsTableDataSource(Microsoft.VisualStudio.LanguageServer.Client.IRemoteLanguageServiceBroker)">
            <summary>
            Creates a <see cref="T:Microsoft.VisualStudio.LanguageServer.Client.IDiagnosticsTableDataSource"/>.
            </summary>
            <param name="broker">The <see cref="T:Microsoft.VisualStudio.LanguageServer.Client.IRemoteLanguageServiceBroker"/> that owns the <see cref="T:Microsoft.VisualStudio.LanguageServer.Client.IDiagnosticsTableDataSource"/>.</param>
            <returns>A new <see cref="T:Microsoft.VisualStudio.LanguageServer.Client.IDiagnosticsTableDataSource"/>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServer.Client.IDiagnosticsTableDataSource.DiagnosticsChangedAsync(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.LanguageServer.Protocol.Diagnostic})">
            <summary>
            Notifies the <see cref="T:Microsoft.VisualStudio.LanguageServer.Client.IDiagnosticsTableDataSource"/> that the diagnostics for the given
            <paramref name="filePath"/> and <paramref name="ownerName"/> have changed.
            </summary>
            <param name="ownerName">The name of the <see cref="T:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClient"/> that owns the <paramref name="diagnostics"/>.</param>
            <param name="filePath">The file path that the <paramref name="diagnostics"/> apply to.</param>
            <param name="diagnostics">A collection of <see cref="T:Microsoft.VisualStudio.LanguageServer.Protocol.Diagnostic"/>s.</param>
            <returns>A task.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServer.Client.IRemoteLanguageDiagnosticsEvents">
            <summary>
            Interface which defines a contract for notifying listeners that a new set of diagnostics is available for a given text snapshot.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServer.Client.IRemoteLanguageDiagnosticsEvents.TextBuffer">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> associated with this listener so we can match incoming diagnostics from language servers
            to their corresponding listeners by comparing the diagnostic file path against the TextBuffer's TextDocument file path.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServer.Client.IRemoteLanguageDiagnosticsEvents.DiagnosticsChanged(Microsoft.VisualStudio.Text.ITextSnapshot,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.LanguageServer.Protocol.Diagnostic})">
            <summary>
            Signals that a new set of diagnostics is available for a given text snapshot.
            </summary>
            <param name="currentSnapshot">The snapshot associated with the set of diagnostics.</param>
            <param name="diagnostics">Set of diagnostics.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServer.Client.IRemoteLanguageServiceBroker">
            <summary>
            Interface which defines methods and properties used to interact with remote language servers.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServer.Client.IRemoteLanguageServiceBroker.JoinableTaskFactory">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Threading.JoinableTaskFactory"/> used to handle all threading work related to remote language server interactions.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServer.Client.IRemoteLanguageServiceBroker.ServiceProvider">
            <summary>
            Gets the <see cref="T:System.IServiceProvider"/> used to provide Visual Studio services to the remote language server.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServer.Client.IRemoteLanguageServiceBroker.LoadAsync(Microsoft.VisualStudio.LanguageServer.Client.IContentTypeMetadata,Microsoft.VisualStudio.LanguageServer.Client.ILanguageClient)">
            <summary>
            Loads a language client.
            </summary>
            <param name="contentType">Content type of the language client.</param>
            <param name="client">The language client.</param>
            <returns>A task that completes when loading completes.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServer.Client.IRemoteLanguageServiceBroker.OnDidOpenTextDocumentAsync(Microsoft.VisualStudio.Text.ITextSnapshot)">
            <summary>
            Notifies relevant language servers that a text document has been opened.
            </summary>
            <param name="snapShot">Current snapshot of the text document.</param>
            <returns>A task that completes when all language servers have been notified of document opening.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServer.Client.IRemoteLanguageServiceBroker.OnDidCloseTextDocumentAsync(Microsoft.VisualStudio.Text.ITextSnapshot)">
            <summary>
            Notifies relevant language servers that a text document has been closed.
            </summary>
            <param name="snapShot">Current snapshot of the text document.</param>
            <returns>A task that completes when all language servers have been notified of document closing.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServer.Client.IRemoteLanguageServiceBroker.OnDidChangeTextDocumentAsync(Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.VisualStudio.Text.ITextSnapshot,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Text.ITextChange})">
            <summary>
            Notifies relevant language servers that a text document has been changed.
            </summary>
            <param name="before">The text snapshot before the change.</param>
            <param name="after">The text snapshot after the change.</param>
            <param name="textChanges">The text changes.</param>
            <returns>A task that completes when all language servers have been notified of document closing.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServer.Client.IRemoteLanguageServiceBroker.AdviseDiagnostics(Microsoft.VisualStudio.LanguageServer.Client.IRemoteLanguageDiagnosticsEvents,Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Subscribes the listener to be notified when diagnostics are available for the text document backing the given text buffer.
            </summary>
            <param name="listener">Listener which will listen for diagnostics events.</param>
            <param name="buffer">The text buffer which the listener cares about.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServer.Client.IRemoteLanguageServiceBroker.UnadviseDiagnostics(Microsoft.VisualStudio.LanguageServer.Client.IRemoteLanguageDiagnosticsEvents)">
            <summary>
            Unsubscribes the listener for diagnostic changes.
            </summary>
            <param name="listener">Listener which listened for diagnostic events.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServer.Client.IRemoteLanguageServiceBroker.WorkspaceSymbolSearchAsync(System.String,Microsoft.VisualStudio.LanguageServer.Client.IRemoteLanguageSymbolSearchEvents,System.Threading.CancellationToken)">
            <summary>
            Notifies the broker to perform a symbol search.
            </summary>
            <param name="searchValue">The query string.</param>
            <param name="listener">The object to call back with symbols.</param>
            <param name="cancellationToken">The cancellation token that will "fire" when the search is cancelled/interrupted.</param>
            <returns>A task that completes when symbol searching has been activated (note: not completed).</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServer.Client.IRemoteLanguageServiceBroker.GetDocumentSymbolsAsync(Microsoft.VisualStudio.Text.ITextDocument)">
            <summary>
            Get symbols for a document.
            </summary>
            <param name="textDocument">The text document.</param>
            <returns>A collection of symbols that are given for the document.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServer.Client.IRemoteLanguageServiceBroker.RequestCompletionsAsync(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Request relevant language servers and return all results from servers in a consolidated list.
            </summary>
            <param name="triggerPoint">Trigger point of completion, meaning the position in the buffer where completion was invoked.</param>
            <returns>An array of completion items, as well as a function to resolve each completion item.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServer.Client.IRemoteLanguageServiceBroker.IsCompletionTriggerCharacter(Microsoft.VisualStudio.Utilities.IContentType,System.Char)">
            <summary>
            Determines if the given character is a supported completion trigger character.
            </summary>
            <param name="contentType">Content type of the buffer.</param>
            <param name="typedChar">Character to check.</param>
            <returns>True if the given character is a supported completion trigger character; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServer.Client.IRemoteLanguageServiceBroker.SupportsCompletion(Microsoft.VisualStudio.Utilities.IContentType)">
            <summary>
            Determines if the given content type has any language servers providing completion support.
            </summary>
            <param name="contentType">Content type of the buffer.</param>
            <returns>True if there are language servers that support completion; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServer.Client.IRemoteLanguageServiceBroker.SupportsDefinition(Microsoft.VisualStudio.Utilities.IContentType)">
            <summary>
            Determines if the given content type has any language servers providing go to definition support.
            </summary>
            <param name="contentType">Content type of the buffer.</param>
            <returns>True if there are language servers that support go to definition; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServer.Client.IRemoteLanguageServiceBroker.RequestDefinitionLocationAsync(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Requests relevant language servers for definition and returns all results from servers in a consolidated list.
            </summary>
            <param name="triggerPoint">Cursor point from which the request is made.</param>
            <returns>An array of locations and its server client name.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServer.Client.IRemoteLanguageServiceBroker.SupportsReferences(Microsoft.VisualStudio.Utilities.IContentType)">
            <summary>
            Determines if the given content type has any language servers providing find references support.
            </summary>
            <param name="contentType">Content type of the buffer.</param>
            <returns>True if there are language servers that support find references; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServer.Client.IRemoteLanguageServiceBroker.RequestReferencesAsync(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Requests relevant language servers for references and returns all results from servers in a consolidated list.
            </summary>
            <param name="triggerPoint">Cursor point from which the request is made.</param>
            <returns>An array of locations and its server client name.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServer.Client.IRemoteLanguageServiceBroker.ShowReferencesAsync(System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,Microsoft.VisualStudio.LanguageServer.Protocol.Location}},Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Displays the given references in find references window.
            </summary>
            <param name="locations">References to display, a tuple of string (the remote server client name) and the location object.</param>
            <param name="triggerPoint">Cursor point from which reference request is made.</param>
            <returns>Task which completes when references have been shown.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServer.Client.IRemoteLanguageServiceBroker.RequestDocumentFormattingAsync(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Requests document to be formatted.
            </summary>
            <param name="textBuffer">TextBuffer of the document.</param>
            <returns>Task which completes when the document has been formatted.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServer.Client.IRemoteLanguageServiceBroker.SupportsDocumentFormatting(Microsoft.VisualStudio.Utilities.IContentType)">
            <summary>
            Determines if the given content type has any language servers providing document formatting support.
            </summary>
            <param name="contentType">Content type of the buffer.</param>
            <returns>True if there are language servers that support document formatting; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServer.Client.IRemoteLanguageServiceBroker.RequestRangeFormattingAsync(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Request document range to be formatted.
            </summary>
            <param name="textView">TextView of the document whose selection range should be formatted.</param>
            <returns>Task which completes when the selection range has been formatted.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServer.Client.IRemoteLanguageServiceBroker.SupportsRangeFormatting(Microsoft.VisualStudio.Utilities.IContentType)">
            <summary>
            Determines if the given content type has any language servers providing document range formatting support.
            </summary>
            <param name="contentType">Content type of the buffer.</param>
            <returns>True if there are language servers that support document range formatting; false otherwise.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServer.Client.IRemoteLanguageSymbolSearchEvents">
            <summary>
            Interface for hooking up to symbol search events.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServer.Client.IRemoteLanguageSymbolSearchEvents.MatchingSymbolsFound(System.String,System.String,Microsoft.VisualStudio.LanguageServer.Protocol.SymbolInformation[])">
            <summary>
            Notify that symbols have been found for a given client and query.
            </summary>
            <param name="remoteLanguageClientName">Name of <see cref="T:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClient"/> that owns the symbols.</param>
            <param name="query">The query that searched for the symbols.</param>
            <param name="symbols">The symbols that were found.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServer.Client.IRemoteLanguageSymbolSearchEvents.Done">
            <summary>
            Notify that symbol search has completed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServer.Client.RemoteLanguageDropdownBarClient.FindClosestSymbol(System.Int32)">
            <summary>
            Find the closest <see cref="T:Microsoft.VisualStudio.LanguageServer.Protocol.SymbolInformation"/> above the <paramref name="lineNumber"/>.
            </summary>
            <param name="lineNumber">The line number (0-based index).</param>
            <returns>The closest <see cref="T:Microsoft.VisualStudio.LanguageServer.Protocol.SymbolInformation"/> above the <paramref name="lineNumber"/>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServer.Client.StringExtensions.EnsureEndsWith(System.String,System.Char)">
            <summary>
            Ensures <paramref name="str"/> ends with <paramref name="endChar"/>.
            </summary>
            <param name="str">String to append <paramref name="endChar"/> to (if it doesn't already end with it).</param>
            <param name="endChar">Character to append.</param>
            <returns>A string that ends <paramref name="endChar"/>.</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServer.Client.TelemetryConstants.TelemetryPrefix">
            <summary>
            Prefix for all telemetry events from LanguageServer.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServer.Client.TelemetryConstants.TelemetryPropertyPrefix">
            <summary>
            Prefix for all telemetry properties from LanguageServer.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServer.Client.TelemetryConstants.DropdownBarClientCreationFailedEventName">
            <summary>
            Telemetry event name for when creation of the dropdown bar fails.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServer.Client.TelemetryConstants.ErrorListDiagnosticsChangedFailedEventName">
            <summary>
            Telemetry event name for when updating the error list fails.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServer.Client.TelemetryConstants.UpdateNavBarFailedEventName">
            <summary>
            Telemetry event name for when updating of the navbar fails.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServer.Client.TelemetryConstants.WorkspaceSymbolSearchFailedEventName">
            <summary>
            Telemetry event name for when a workspace symbol search fails.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServer.Client.TelemetryConstants.ClientActivatedEventName">
            <summary>
            Telemetry event name for when a client is activated.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServer.Client.TelemetryConstants.ClientActivationFailedEventName">
            <summary>
            Telemetry event name for when client activation fails.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServer.Client.TelemetryConstants.ClientShutdownFailedEventName">
            <summary>
            Telemetry event name for when a <see cref="F:Microsoft.VisualStudio.LanguageServer.Protocol.Methods.Shutdown"/> message fails.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServer.Client.TelemetryConstants.ClientExitFailedEventName">
            <summary>
            Telemetry event name for when a <see cref="F:Microsoft.VisualStudio.LanguageServer.Protocol.Methods.Exit"/> message fails.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServer.Client.TelemetryConstants.ClientConfigurationSectionsThrewExceptionEventName">
            <summary>
            Telemetry event name for when a <see cref="P:Microsoft.VisualStudio.LanguageServer.Client.ILanguageClient.ConfigurationSections" /> throws an exception.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServer.Client.TelemetryConstants.DocumentClosedFailedEventName">
            <summary>
            Telemetry event name for when a <see cref="F:Microsoft.VisualStudio.LanguageServer.Protocol.Methods.TextDocumentDidClose"/> message fails.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServer.Client.TelemetryConstants.DocumentChangedFailedEventName">
            <summary>
            Telemetry event name for when a <see cref="F:Microsoft.VisualStudio.LanguageServer.Protocol.Methods.TextDocumentDidChange"/> message fails.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServer.Client.TelemetryConstants.DocumentOpenedFailedEventName">
            <summary>
            Telemetry event name for when a <see cref="F:Microsoft.VisualStudio.LanguageServer.Protocol.Methods.TextDocumentDidOpen"/> message fails.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServer.Client.TelemetryConstants.DocumentContentTypeChangedFailedEventName">
            <summary>
            Telemetry event name for when switching content type of a file fails.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServer.Client.TelemetryConstants.FormatRangeFailedEventName">
            <summary>
            Telemetry event name for when a <see cref="F:Microsoft.VisualStudio.LanguageServer.Protocol.Methods.TextDocumentRangeFormatting"/> message fails.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServer.Client.TelemetryConstants.FormatDocumentFailedEventName">
            <summary>
            Telemetry event name for when a <see cref="F:Microsoft.VisualStudio.LanguageServer.Protocol.Methods.TextDocumentFormatting"/> message fails.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServer.Client.TelemetryConstants.FindAllReferenceFailedEventName">
            <summary>
            Telemetry event name for when a <see cref="F:Microsoft.VisualStudio.LanguageServer.Protocol.Methods.TextDocumentReferences"/> message fails.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServer.Client.TelemetryConstants.DefinitionFailedEventName">
            <summary>
            Telemetry event name for when a <see cref="F:Microsoft.VisualStudio.LanguageServer.Protocol.Methods.TextDocumentDefinition"/> message fails.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServer.Client.TelemetryConstants.CompletionFailedEventName">
            <summary>
            Telemetry event name for when a <see cref="F:Microsoft.VisualStudio.LanguageServer.Protocol.Methods.TextDocumentCompletion"/> message fails.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServer.Client.TelemetryConstants.CompletionResolveFailedEventName">
            <summary>
            Telemetry event name for when a <see cref="F:Microsoft.VisualStudio.LanguageServer.Protocol.Methods.TextDocumentCompletionResolve"/> message fails.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServer.Client.TelemetryConstants.AsPropertyPrefix(System.String)">
            <summary>
            Convert an event to a property prefix.
            </summary>
            <param name="eventName">Event name to "propertize".</param>
            <returns>A property prefix for the event (ends with '.').</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServer.Client.TelemetryLoggerResult.None">
            <summary>
            Indicates the operation had an unknown result.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServer.Client.TelemetryLoggerResult.Success">
            <summary>
            Indicates the operation was successful.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServer.Client.TelemetryLoggerResult.Failure">
            <summary>
            Indicates a product bug.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServer.Client.TelemetryLoggerResult.UserFault">
            <summary>
            Indicates a user error.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServer.Client.TelemetryLoggerResult.UserCancel">
            <summary>
            Indicates a user cancellation.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServer.Client.TelemetryLoggerSeverity">
            <summary>
            Shim for <see cref="T:Microsoft.VisualStudio.Telemetry.TelemetrySeverity"/> so the unit tests don't need to take a dependency on Telemetry.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServer.Client.TelemetryLoggerSeverity.Low">
            <summary>
            Low severity
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServer.Client.TelemetryLoggerSeverity.Normal">
            <summary>
            Normal severity
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServer.Client.TelemetryLoggerSeverity.High">
            <summary>
            High severity
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServer.Client.TextEditComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two TextEdit objects in descending order based on start line and character.
            </summary>
            <param name="x">X TextEdit object to compare.</param>
            <param name="y">Y TextEdit object to compare.</param>
            <returns>-1 if xEdit is further down in the document, 0 if xEdit and yEdit refer to the same start location, 1 if yEdit is further down in the document.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServer.Client.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServer.Client.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServer.Client.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServer.Client.Resources.DefaultLanguageClientName">
            <summary>
              Looks up a localized string similar to Unnamed Language Extension.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServer.Client.Resources.FindReferenceSourceIdentifier">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; references.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServer.Client.Resources.LanguageServerActivationError">
            <summary>
              Looks up a localized string similar to There was an error activating the remote language server, {0}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServer.Client.Resources.LanguageServerActivationErrorDetails">
            <summary>
              Looks up a localized string similar to For more details, please run devenv /log and examine the {0} file..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServer.Client.Resources.LanguageServerCompletionLoadingLabel">
            <summary>
              Looks up a localized string similar to Loading....
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServer.Client.Resources.LanguageServerCompletionSetName">
            <summary>
              Looks up a localized string similar to Language Server.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServer.Client.Resources.TextMateCompletionSetName">
            <summary>
              Looks up a localized string similar to TextMate.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServer.Client.ShowMessageRequestDialog">
            <summary>
            Interaction logic for ShowMessageRequestDialog.xaml
            </summary>
            <summary>
            ShowMessageRequestDialog
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServer.Client.ShowMessageRequestDialog.#ctor(System.String,Microsoft.VisualStudio.LanguageServer.Protocol.ShowMessageRequestParams)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.LanguageServer.Client.ShowMessageRequestDialog"/> class.
            </summary>
            <param name="ownerName">The language server that sent the <paramref name="showMessageRequest"/>.</param>
            <param name="showMessageRequest">The <see cref="T:Microsoft.VisualStudio.LanguageServer.Protocol.ShowMessageParams"/> to display to the user.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServer.Client.ShowMessageRequestDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
