<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.Workspace.VSIntegration.Contracts</name>
    </assembly>
    <members>
        <member name="T:Microsoft.VisualStudio.Workspace.VSIntegration.Contracts.IVsFolderWorkspaceService">
            <summary>
            Folder Workspace Service for VS
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.VSIntegration.IVsSolutionMSBuildProjectServiceFactory">
            <summary>
            Interface IVsSolutionMSBuildProjectServiceFactory
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.IVsSolutionMSBuildProjectServiceFactory.GetMSBuildProjectDataServiceAsync(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Gets the MsBuild project data service for a particular configuration.
            <para>If the parameter passed is null, then the service for active configuration is returned.</para>
            </summary>
            <param name="projectFile">Path of the project file</param>
            <param name="projectConfiguration">Project configuration</param>
            <param name="projectProperties">Project properties</param>
            <returns>MsBuild project data service instance</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.VSIntegration.IVsSolutionWorkspaceNugetService">
            <summary>
            Interface IVsSolutionWorkspaceNugetService
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.IVsSolutionWorkspaceNugetService.GetProjectJsonDataAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets data stored in the project.json file included in the project.
            </summary>
            <param name="projectFile">Path of the project file</param>
            <param name="cancellationToken">Optional cancellation token</param>
            <returns>Data stored in the project.json file included in the project.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.IVsSolutionWorkspaceNugetService.GetPackagesConfigDataAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets data stored in the packages.config file included in the project.
            </summary>
            <param name="projectFile">Path of the project file</param>
            <param name="cancellationToken">Optional cancellation token</param>
            <returns>Collection of <see cref="T:Microsoft.VisualStudio.Workspace.VSIntegration.PackagesConfigData"/> objects</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.IVsSolutionWorkspaceNugetService.GetPackageReferenceDataAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the package reference data included in the project file.
            </summary>
            <param name="projectFile">Path of the project file</param>
            <param name="cancellationToken">Optional cancellation token</param>
            <returns>Package reference data included in the project file.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.VSIntegration.IVsSolutionWorkspaceService">
            <summary>
            Interface IVsSolutionWorkspaceService
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.IVsSolutionWorkspaceService.SolutionFile">
            <summary>
            The active solution file
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.IVsSolutionWorkspaceService.ActiveConfiguration">
            <summary>
            The active configuration
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.IVsSolutionWorkspaceService.BeginProjectBuild">
            <summary>
            Provide per project events
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.IVsSolutionWorkspaceService.EndProjectBuild">
            <summary>
            Provide per project events
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.IVsSolutionWorkspaceService.OpenSolutionWorkspace(System.String)">
            <summary>
            Open a solution
            </summary>
            <param name="solutionPath">Path to a solution file</param>
            <returns>A new solution workspace being created</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.IVsSolutionWorkspaceService.CloseActiveWorkspace">
            <summary>
            Close the Active workspace
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.IVsSolutionWorkspaceService.BuildProject(System.String,System.String,Microsoft.VisualStudio.Workspace.Build.BuildType,System.IProgress{Microsoft.VisualStudio.Workspace.IFileContextActionProgressUpdate},System.Threading.CancellationToken)">
            <summary>
            Build a project by invoking a build context actions from a provider
            </summary>
            <param name="projectFile">The target project file</param>
            <param name="solutionBuildConfiguration">The solution build configuration</param>
            <param name="buildType">The desired build type</param>
            <param name="progress">A progress monitor</param>
            <param name="cancellationToken">Optional cancellation token</param>
            <returns>Completion task with build succeed result</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.IVsSolutionWorkspaceService.BuildProjects(System.Collections.Generic.IEnumerable{System.String},System.String,Microsoft.VisualStudio.Workspace.Build.BuildType,System.IProgress{Microsoft.VisualStudio.Workspace.IFileContextActionProgressUpdate},System.Threading.CancellationToken)">
            <summary>
            Build multiple project files from a solution
            </summary>
            <param name="projectFiles">List of project files to build</param>
            <param name="solutionBuildConfiguration">The solution build configuration</param>
            <param name="buildType">The desired build type</param>
            <param name="progress">A progress monitor</param>
            <param name="cancellationToken">Optional cancellation token</param>
            <returns>Completion task with build succeed result</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.IVsSolutionWorkspaceService.GetManagedCommandLineInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get the managed command line info.
            </summary>
            <param name="solutionBuildConfiguration">The solution build configuration</param>
            <param name="cancellationToken">Optional cancellation token</param>
            <returns>Completion task with a dictionary map of command line info</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.VSIntegration.IVsWorkspaceFactory">
            <summary>
            IVsWorkspaceFactory interface to provide abstraction on Active IWorkspace
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.IVsWorkspaceFactory.CurrentWorkspace">
            <summary>
            The active workspace
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.IVsWorkspaceFactory.OnActiveWorkspaceChanged">
            <summary>
            Active workspace changed
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.VSIntegration.NugetConstants">
            <summary>
            Constants related to Nuget provider
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.VSIntegration.NugetConstants.ProjectJsonDataValueType">
            <summary>
            Identifier of the project.json data objects
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.VSIntegration.NugetConstants.PackagesConfigDataValueType">
            <summary>
            Identifier of the packages.config data objects
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.VSIntegration.NugetConstants.PackageReferenceDataValueType">
            <summary>
            Identifier of the package reference data objects
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.VSIntegration.NugetConstants.PackagesConfigFileName">
            <summary>
            Name of the packages.config file
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.VSIntegration.NugetConstants.ProjectJsonFileName">
            <summary>
            Name of the project.json file
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.VSIntegration.PackageReferenceData">
            <summary>
            Package reference data in the project file
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.VSIntegration.PackageReferenceData.Name">
            <summary>
            Name of the package reference
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.VSIntegration.PackageReferenceData.Version">
            <summary>
            Version of the package reference
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.VSIntegration.PackagesConfigData">
            <summary>
            Package data in the packages.config file.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.VSIntegration.PackagesConfigData.PackageId">
            <summary>
            Package id
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.VSIntegration.PackagesConfigData.Version">
            <summary>
            Package version
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.VSIntegration.PackagesConfigData.TargetFramework">
            <summary>
            Target framework of the package
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.VSIntegration.PackagesConfigData.DevelopmentDependency">
            <summary>
            Is the package a development dependency?
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.VSIntegration.SVsSolutionWorkspaceService">
            <summary>
            type of IVsSolutionWorkspaceService
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IChildrenSource">
            <summary>
            Provides children nodes of a node
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IChildrenSource.Extender">
            <summary>
            Gets extender object that created this source
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IChildrenSource.Order">
            <summary>
            Gets the collection order.
            All nodes form each children collection stay together.
            groups are ordered by this field (higher order - goes to the bottom in view)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IChildrenSource.ForceExpanded">
            <summary>
            Gets a value indicating whether the children should always be visible under the node.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IChildrenSource.GetCollectionAsync">
            <summary>
            Gets the collection of children nodes.
            </summary>
            <returns>A task that completes when the operation is done.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IFileNode">
            <summary>
            Implemented by nodes that represent a file on disk
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IFileNode.FileName">
            <summary>
            The file name
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IFileSystemNode">
            <summary>
            Implemented by nodes that represent file system objects
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IFileSystemNode.FullPath">
            <summary>
            Full path to the item
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IFolderNode">
            <summary>
            Implemented by nodes that represent a folder on disk
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IFolderNode.FolderName">
            <summary>
            The folder name
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.VSIntegration.UI.INodeContainer">
            <summary>
            represent workspace node container (tree view currently).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.INodeContainer.JTF">
            <summary>
            The shared task factory.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.INodeContainer.NodeExtenders">
            <summary>
            Available node extenders
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.INodeContainer.Selection">
            <summary>
            Currently selected nodes in the tree view. can be empty one or more.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.INodeContainer.WorkspaceClosing">
            <summary>
            Set when workspace is closing. Meant to be used in background task to provide fast exit when closing.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.INodeContainer.ShowAll">
            <summary>
            "Show all files"
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.INodeContainer.SelectNode(Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase)">
            <summary>
            Select the given node (as first item in selection)
            </summary>
            <param name="node">the node we want to select</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.INodeContainer.ShouldDisableSpecialKeysHandling">
            <summary>
            Where to suppress command routing for special keys (such Delete).
            For example when the underlying control is in "rename" mode.
            </summary>
            <returns>true to suppress the special key routing</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.INodeContainer.TryInitiateRenameNode(Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase)">
            <summary>
            Start renaming a particular node
            </summary>
            <param name="node">the node we want to rename</param>
            <returns>true if renaming was entered, false if not (if it is not applicable)</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.INodeContainer.SetExpansionStateForNode(Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase,System.Boolean,System.Boolean)">
            <summary>
            set the expansion state of a node
            </summary>
            <param name="node">The node whose expansion state is to be changed.</param>
            <param name="expanded">true = expanded, false = collapsed</param>
            <param name="recursive">apply the state for children</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.VSIntegration.UI.INodeExtender">
            <summary>
            Extender for a node.
            Can add a children or command handlers
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.INodeExtender.ProvideChildren(Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase)">
            <summary>
            If applicable provides children to a node.
            Children collection can be actually empty at this point.
            </summary>
            <param name="parentNode">node to be extended</param>
            <returns>collection if applicable, null otherwise</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.INodeExtender.ProvideCommandHandler(Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase)">
            <summary>
            if applicable provides a node with a command handler.
            </summary>
            <param name="parentNode">node to extend</param>
            <returns>command handler, or null</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IUINode">
            <summary>
            Abstract the UI framework object that holds a visual node into the particular container
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IUINode.WorkspaceVisualNode">
            <summary>
            the workspace node object
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IUINode.RealizedChildren">
            <summary>
            collection of currently visible children
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IUINode.Text">
            <summary>
            Node text
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IUINode.ToolTipText">
            <summary>
            Node ToolTip
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IUINode.FontStyle">
            <summary>
            font style of the text
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IUINode.FontWeight">
            <summary>
            font weight of the text
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IUINode.IsCut">
            <summary>
            item is in a "cut" state
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IUINode.IsExpandable">
            <summary>
            If true, node will have [+] expander shown, and can be expanded and collapsed in view.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IUINode.SetIcon(System.Guid,System.Int32)">
            <summary>
            Set icon for the item
            </summary>
            <param name="guid">icon guid</param>
            <param name="id">icon id</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IUINode.SetExpandedIcon(System.Guid,System.Int32)">
            <summary>
            Set icon for the item when it is expanded
            </summary>
            <param name="guid">icon guid</param>
            <param name="id">icon id</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IUINode.SetStateIcon(System.Guid,System.Int32)">
            <summary>
            Set icon for the item state (small icon on the left)
            </summary>
            <param name="guid">icon guid</param>
            <param name="id">icon id</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IUINode.SetOverlayIcon(System.Guid,System.Int32)">
            <summary>
            Set overlay icon for the item (small icon in the bottom corner)
            </summary>
            <param name="guid">icon guid</param>
            <param name="id">icon id</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IUINode.AddChildrenGroup">
            <summary>
            create a new children group
            A children group can contain any number of children that will always be displayed together.
            Groups will be ordered by creation sequence.
            </summary>
            <returns>group id</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IUINode.EmptyAllChildrenGroups">
            <summary>
            remove all children
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IUINode.RemoveAllChildrenGroups">
            <summary>
            remove all children groups. (used in cases like deleting a node to immediately remove its children from visualization)
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IUINode.UpdateChildrenGroupAsync(System.Int32,System.Collections.Generic.IReadOnlyCollection{Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase})">
            <summary>
            Update the children in a children group. The UI node will attempt to make a minimal changes
            </summary>
            <param name="groupId">group id (as returned by AddChildrenGroup)</param>
            <param name="newCollection">the new list of children</param>
            <returns>async progress</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IWorkspaceCommandHandler">
            <summary>
            adds a command handling associated with a node
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IWorkspaceCommandHandler.Priority">
            <summary>
            Priority is used in command routing among multiple handlers. Higher priority means a handler will be called first.
            The first handler to acknowledge it support the command will stop the routing.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IWorkspaceCommandHandler.IgnoreOnMultiselect">
            <summary>
            If true, the command handler will be ignored when multi selection. If all command handlers for a node state to ignore on multi select,
            node will be removed from selection.
            Still if node has no command handlers at all it will cancel command routing for entire selection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IWorkspaceCommandHandler.QueryStatus(System.Collections.Generic.List{Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase},System.Guid,System.UInt32,System.UInt32@,System.String@)">
            <summary>
            Tailored helper for IOleCommandTarget.QueryStatus
            </summary>
            <param name="selection">selected nodes</param>
            <param name="pguidCmdGroup">command guid</param>
            <param name="nCmdID">command id</param>
            <param name="cmdf">commands flags (such Visible/Latched etc)</param>
            <param name="customTitle">for dynamic title commands</param>
            <returns>true when command is handled</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.IWorkspaceCommandHandler.Exec(System.Collections.Generic.List{Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase},System.Guid,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            Tailored helper for IOleCommandTarget.Exec
            </summary>
            <param name="selection">selected nodes</param>
            <param name="pguidCmdGroup">command guid</param>
            <param name="nCmdID">command id</param>
            <param name="nCmdexecopt">vs stuff</param>
            <param name="pvaIn">inputs (such us when executed from Command window with arguments)</param>
            <param name="pvaOut">outputs</param>
            <returns>execution HResult, OLECMDERR_E_NOTSUPPORTED if handler does not support it (which means controller will try next handler).</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase">
             <summary>
             This is the base class that we'll use for all Explorer "nodes" we want to show in the context of Workspace tree views.
             represent a single node in workspace tree view (node can be anything we decide going forward) aka
             Folder
             File
             Virtual node (aka named group, for pins or whatever)
             etc ..
            
             </summary>
            <summary>
            IDispose pattern for WorkspaceVisualNodeBase
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.MonikerSeparator">
            <summary>
            Full mode moniker separator character
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.#ctor(Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase"/> class.
            Used by nodes that are children
            </summary>
            <param name="parent">parent node</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.#ctor(Microsoft.VisualStudio.Workspace.VSIntegration.UI.INodeContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase"/> class.
            Used by root nodes
            </summary>
            <param name="container">hosting tree view</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.Text">
            <summary>
             the node text;
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.IsSourcesInitialized">
            <summary>
            true if children are refreshed at least once.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.InTransition">
            <summary>
            Node represent object in transition (aka deleting, name setting, etc)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.Container">
            <summary>
            Hosting tree view
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.Parent">
            <summary>
            Parent node (not needed for UI, just for us)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.Root">
            <summary>
            Root node
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.Workspace">
            <summary>
            Workspace object this node belongs to
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.NodeMoniker">
            <summary>
            Persistence moniker for the node. It is expected to be unique among the children nodes with the same parent.
            This moniker can be used to identify the node under a "parent". Can be null.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.NodeFullMoniker">
            <summary>
            "Full" persistence moniker can identify the node under entire workspace. Will be null if node's moniker or any of it's parents monikers are null.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.CommandHandlers">
            <summary>
            Command handlers associated with this code. To be consulted if node is part of selection
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.IsExpandable">
            <summary>
            If true, node will have [+] expander shown, and can be expanded and collapsed in view.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.IsExpanded">
            <summary>
            Whether node is currently expanded
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.Items">
            <summary>
            Children collection property (will be accessed by XAML)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.ItemsInternal">
            <summary>
            Internal item's collection
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.IsDefaultExpanded">
            <summary>
            node should be expanded by default
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.VSSelectionKind">
            <summary>
            Type of the node of VS selection. If Empty, node won't participate in the VSSelection.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.VSSelectionMoniker">
            <summary>
            the URL to use for vs selection
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.SupportsRename">
            <summary>
             whether the item supports rename.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.ProvisionalViewingStatus">
            <summary>
            provisional status if node support invoke
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.InvokeAction">
            <summary>
            Invoke action if supported (double-click, enter)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.ValidateCounter">
            <summary>
            Get the validation count of the children of this node.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.AlwaysExpandable">
            <summary>
            true if the node is always expandable even if there is no children (such us the workspace node).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.HardRefresh">
            <summary>
            Node require add/remove to refresh
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.UINode">
            <summary>
            The UI container object
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.GetParentMoniker(System.String,System.String@,System.String@)">
            <summary>
            Utility to extract the parent parts from a full moniker string.
            </summary>
            <param name="fullNodeMoniker">a node full moniker</param>
            <param name="nodeMoniker">individual node moniker</param>
            <param name="parentMoniker">parents full moniker</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.SplitMoniker(System.String)">
            <summary>
            Utility to break the fullMoniker to parts (containing on individual nodeMonikers of all parents, starting from root).
            </summary>
            <param name="fullNodeMoniker">a node full moniker</param>
            <returns>individual monikers of all node's parent and node itself that starting from the root</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.SetIcon(System.Guid,System.Int32)">
            <summary>
            Default Icon
            </summary>
            <param name="guid">icon guid</param>
            <param name="id">icon id</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.SetExpandedIcon(System.Guid,System.Int32)">
            <summary>
            Icon to use when "Expanded" in the view
            </summary>
            <param name="guid">icon guid</param>
            <param name="id">icon id</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.SetOverlayIcon(System.Guid,System.Int32)">
            <summary>
            Icon to provide additional icon adornment (normally shown in the corner of the other icon)
            </summary>
            <param name="guid">icon guid</param>
            <param name="id">icon id</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.SetStateIcon(System.Guid,System.Int32)">
            <summary>
            Small icon on the left (like source control check-out state)
            </summary>
            <param name="guid">icon guid</param>
            <param name="id">icon id</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.RefreshStatus">
            <summary>
            Update to the latest visual representation (icons and such).
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.Invalidate">
            <summary>
            invalidate the children collection. Note that this does not trigger an refresh,
            it will just indicate that the node is out of sync.
            </summary>
            <returns>the invalidation count, it can be used to compare with ValidateCounter to determine if the change that caused invalidation is processed</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.GetRealizedChild(System.String)">
            <summary>
            Get a child node with a given moniker.
            </summary>
            <param name="nodeMoniker">child's persistence moniker</param>
            <returns>a child Node with the passed moniker if exists</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.Compare(Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase)">
            <summary>
            Comparison of the two nodes. Used for low impact refresh.
            </summary>
            <param name="right">the node to compare to</param>
            <returns>-1 if less, 0 - equal, 1 if bigger</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.Refresh(Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase)">
            <summary>
            Called on refresh, when a "new node" is created but considered equal.
            This give opportunity to "refresh" some non-essential properties from the newer object
            (like capitalization)
            </summary>
            <param name="recent">an node recently created to represent same underlying object</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.InitExtensions(Microsoft.VisualStudio.Workspace.VSIntegration.UI.IUINode)">
            <summary>
            Initialize Extension Providers for this node
            </summary>
            <param name="uiNode">the UI container object</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.OnChildrenCollectionChanged">
            <summary>
            called by UI control host when children collection changed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.CollapseAll(System.Boolean)">
            <summary>
            Collapse all the children (recursively) of a node (and optionally the node itself)
            </summary>
            <param name="childrenOnly">only collapse children, not the node itself</param>
            <returns>void</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.RefreshChildrenAsync(System.Boolean)">
            <summary>
            Initiate children refresh (can be async)
            </summary>
            <param name="recursive">true to trigger refresh on the children items as well (if they are being expanded already)</param>
            <returns>A task that completes when the operation is done.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.BeforeExpand">
            <summary>
            Called before node to be expanded in UI
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.AfterCollapse">
            <summary>
            called after node is collapsed in UI
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.QueryStatus(System.Guid,System.UInt32,System.UInt32@,System.String@)">
            <summary>
            Command routing Query Status result for this node alone.
            </summary>
            <param name="pguidCmdGroup">command guid</param>
            <param name="nCmdID">command id</param>
            <param name="cmdf">commands flags (such Visible/Latched etc)</param>
            <param name="customTitle">for dynamic title commands</param>
            <returns>true when command is handled</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.Exec(System.Guid,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            Command routing Exec on this node.
            </summary>
            <param name="pguidCmdGroup">command guid</param>
            <param name="nCmdID">command id</param>
            <param name="nCmdexecopt">vs stuff</param>
            <param name="pvaIn">inputs (such us when executed from Command window with arguments)</param>
            <param name="pvaOut">outputs</param>
            <returns>execution HResult, OLECMDERR_E_NOTSUPPORTED if handler does not support it (which means controller will try next handler)</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.GetChildCollectionForProvider(Microsoft.VisualStudio.Workspace.VSIntegration.UI.INodeExtender)">
            <summary>
            Get the child collection associated with a provider.
            </summary>
            <param name="provider">provider</param>
            <returns>associated children collection</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.ApplyActionOnRealizedNodes(System.Action{Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase})">
            <summary>
            Enumerate already realized nodes and execute an action
            </summary>
            <param name="nodeAction">the action to execute on already created node</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.NavigateToAsync(System.String)">
            <summary>
            Navigate to child node or self representing <paramref name="fullPath"/>.
            Refresh (and realize) the nodes, if needed.
            </summary>
            <param name="fullPath">File system object to navigate to.</param>
            <returns>
            Child node or self matching moniker. Null if the moniker doesn't
            represent a node under this.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.NavigateToMonikerWithRefreshAsync(System.String)">
            <summary>
            Navigate to child node or self as specified by full moniker.
            Refresh (and realize) the nodes, if needed.
            </summary>
            <param name="fullNodeMoniker">Full node moniker from root.</param>
            <returns>
            Child node or self matching moniker. Null if the moniker doesn't
            represent a node under this.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.NavigateToMonikerNoRefresh(System.String)">
            <summary>
            Navigate to child node or self as specified by full moniker.
            Will not force refresh/realization of child nodes to find the target.
            </summary>
            <param name="fullNodeMoniker">Full node moniker from root.</param>
            <returns>
            Child node or self matching moniker. Null if the moniker doesn't
            represent a node under this or if any parents nodes aren't realized.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.GetRenameLabel">
            <summary>
            Rename support
            </summary>
            <returns>the initial text in rename box</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.DoRename(System.String)">
            <summary>
            called to commit the rename (aka rename the underlying object and update the Text box)
            </summary>
            <param name="newName">the new name</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.CancelRename">
            <summary>
            called when rename is canceled.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.GetDefaultSelectionLength(System.String)">
            <summary>
            get the default selection length for rename box (aka files will select the text before the last ".")
            </summary>
            <param name="label">the current name</param>
            <returns>the desired selected area length</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.OnInitialized">
            <summary>
            called when node is initialized and hooked to UI control
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.ClearProviders">
            <summary>
            Clear the children providers, remove all children and command handlers.
            Node becomes inactive and just a visual hint.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.OnChildNodeExpandedStateChanged(Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase,System.Boolean)">
            <summary>
            called on the root node when any inner children expansion changed.
            </summary>
            <param name="node">node that get expanded or collapsed</param>
            <param name="isExpanded">what is the current expansion state</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.BeforeChildrenRefresh">
            <summary>
            Called before populating of the children for this node
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.AfterChildrenRefresh">
            <summary>
            Called after populating of the children for this node
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.IsDisposed">
            <summary>
            Gets a value indicating whether the object is being disposed
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.Dispose">
            <summary>
            <inheritdoc/>
            This code added to correctly implement the disposable pattern.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.VSIntegration.UI.WorkspaceVisualNodeBase.Dispose(System.Boolean)">
            <summary>
            part of dispose pattern.
            </summary>
            <param name="disposing">true if called from Dispose()</param>
        </member>
    </members>
</doc>
